from aiogram import types, Dispatcher
from utils.storage import load_data, get_random_quiz, check_answer, save_data
from keyboards.quiz_kb import quiz_keyboard
from keyboards.main_kb import main_menu


async def start_quiz(message: types.Message):
    quiz = get_random_quiz()
    user_id = str(message.from_user.id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_data()
    if user_id not in data["users"]:
        data["users"][user_id] = {"username": message.from_user.username, "score": 0}

    data["users"][user_id]["current_quiz"] = quiz["id"]
    save_data(data)

    await message.answer(
        f"üé≤ –í–æ–ø—Ä–æ—Å:\n{quiz['question']}",
        reply_markup=quiz_keyboard(quiz['options'])
    )


async def handle_quiz_answer(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in data["users"] or not data["users"][user_id]["current_quiz"]:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /quiz")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quiz_id = data["users"][user_id]["current_quiz"]
    quiz = next((q for q in data["quizzes"] if q["id"] == quiz_id), None)

    if not quiz:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if message.text not in quiz["options"]:
        await message.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if check_answer(message.from_user.id, message.text):
        data["users"][user_id]["current_quiz"] = None
        data["users"][user_id]["score"] += 10
        save_data(data)
        await message.answer(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –æ—á–∫–æ–≤\n–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {data['users'][user_id]['score']}\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç:\n{quiz['fact']}",
            reply_markup=main_menu()
        )
    else:
        data["users"][user_id]["current_quiz"] = None
        save_data(data)
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz['correct']}", reply_markup=main_menu())


def register_quiz_handlers(dp: Dispatcher):
    dp.message.register(start_quiz, lambda msg: msg.text == "üé≤ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @dp.message()
    async def handle_all_messages(message: types.Message):
        data = load_data()
        user_id = str(message.from_user.id)

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if user_id in data["users"] and data["users"][user_id]["current_quiz"]:
            await handle_quiz_answer(message)
